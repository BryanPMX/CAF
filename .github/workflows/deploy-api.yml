name: Deploy API to AWS ECS

on:
  push:
    branches: [main]
    paths: ['api/**']
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: caf-backend
  ECS_SERVICE: caf-backend-service
  ECS_CLUSTER: caf-cluster

jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 20

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: false

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        echo "Building Docker image with tag: $IMAGE_TAG"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./api
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Also tag as latest
        echo "Tagging as latest and pushing..."
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Successfully built and pushed image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Update ECS Task Definition
      id: update-task-definition
      run: |
        # Get the current task definition
        TASK_DEFINITION_ARN=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].taskDefinition' --output text)
        echo "Current task definition: $TASK_DEFINITION_ARN"
        
        # Get the task definition JSON
        aws ecs describe-task-definition --task-definition $TASK_DEFINITION_ARN --query taskDefinition > task-definition.json
        
        # Update the image URI in the task definition
        ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
        NEW_IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}"
        
        # Use jq to update the image URI
        jq --arg IMAGE_URI "$NEW_IMAGE_URI" '.containerDefinitions[0].image = $IMAGE_URI' task-definition.json > updated-task-definition.json
        
        # Remove fields that shouldn't be in the new task definition
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' updated-task-definition.json > final-task-definition.json
        
        # Register the new task definition
        NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://final-task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "New task definition ARN: $NEW_TASK_DEFINITION_ARN"
        echo "new-task-definition-arn=$NEW_TASK_DEFINITION_ARN" >> $GITHUB_OUTPUT
        
        # Clean up temporary files
        rm task-definition.json updated-task-definition.json final-task-definition.json

    - name: Deploy to Amazon ECS
      run: |
        echo "Deploying with new task definition: ${{ steps.update-task-definition.outputs.new-task-definition-arn }}"
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition ${{ steps.update-task-definition.outputs.new-task-definition-arn }} \
          --force-new-deployment

    - name: Wait for deployment to complete
      run: |
        echo "Monitoring deployment progress..."
        echo "Service: $ECS_SERVICE"
        echo "Cluster: $ECS_CLUSTER"
        
        # Wait for the service to be stable with timeout
        if aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE --cli-read-timeout 900; then
          echo "✅ Deployment completed successfully!"
        else
          echo "⚠️ Timeout reached, checking service status manually..."
          
          # Get service status
          SERVICE_STATUS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount,PendingCount:pendingCount}')
          echo "Service status: $SERVICE_STATUS"
          
          # Check if deployment is actually successful
          RUNNING_COUNT=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].runningCount' --output text)
          DESIRED_COUNT=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].desiredCount' --output text)
          
          if [ "$RUNNING_COUNT" -ge "$DESIRED_COUNT" ]; then
            echo "✅ Service is running with sufficient task count: $RUNNING_COUNT/$DESIRED_COUNT"
          else
            echo "❌ Service not stable: $RUNNING_COUNT/$DESIRED_COUNT tasks running"
            exit 1
          fi
        fi

    - name: Verify deployment health
      run: |
        echo "Verifying deployment health..."
        
        # Wait for containers to be ready
        echo "Waiting 30 seconds for containers to initialize..."
        sleep 30
        
        # Test health endpoints with retries
        for i in {1..3}; do
          echo "Health check attempt $i/3..."
          if curl -f --max-time 10 http://api.caf-mexico.org/health; then
            echo "✅ Health check passed"
            break
          else
            echo "❌ Health check failed, attempt $i"
            if [ $i -eq 3 ]; then
              echo "❌ All health check attempts failed"
              exit 1
            fi
            sleep 10
          fi
        done
        
        # Test ready endpoint
        for i in {1..3}; do
          echo "Ready check attempt $i/3..."
          if curl -f --max-time 10 http://api.caf-mexico.org/health/ready; then
            echo "✅ Ready check passed"
            break
          else
            echo "❌ Ready check failed, attempt $i"
            if [ $i -eq 3 ]; then
              echo "❌ All ready check attempts failed"
              exit 1
            fi
            sleep 10
          fi
        done
        
        echo "🎉 Deployment verification completed successfully!"

    - name: Deployment summary
      if: always()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ steps.build-image.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Task Definition**: ${{ steps.update-task-definition.outputs.new-task-definition-arn }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY