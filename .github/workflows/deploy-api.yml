name: Deploy API to AWS ECS

on:
  push:
    branches: [main]
    paths: ['api/**']
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: caf-backend
  ECS_SERVICE: caf-backend-service
  ECS_CLUSTER: caf-cluster

jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./api
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Also tag as latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to Amazon ECS
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment

    - name: Wait for deployment to complete
      run: |
        echo "Monitoring deployment progress..."
        # Wait for deployment with longer timeout and better error handling
        timeout 900 aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE || {
          echo "Deployment still in progress, checking health manually..."
          # Check if service is actually healthy even if not marked stable
          RUNNING_COUNT=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].runningCount' --output text)
          DESIRED_COUNT=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].desiredCount' --output text)
          if [ "$RUNNING_COUNT" = "$DESIRED_COUNT" ]; then
            echo "Service is running with desired task count: $RUNNING_COUNT/$DESIRED_COUNT"
          else
            echo "Service not yet stable: $RUNNING_COUNT/$DESIRED_COUNT tasks running"
            exit 1
          fi
        }
        echo "Deployment completed successfully!"

    - name: Verify deployment
      run: |
        # Wait a bit for health checks
        sleep 30
        
        # Test the API endpoint
        curl -f http://api.caf-mexico.org/health || echo "Health check failed"
        curl -f http://api.caf-mexico.org/health/ready || echo "Ready check failed"
