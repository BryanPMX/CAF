name: Deploy API to AWS ECS

on:
  push:
    branches: [main]
    paths: ['api/**']
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: caf-backend
  ECS_SERVICE: caf-backend-service
  ECS_CLUSTER: caf-cluster
  # Explicit task definition family for better management
  ECS_TASK_DEFINITION_FAMILY: caf-backend

jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 20

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: false

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        echo "Building Docker image with tag: $IMAGE_TAG"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./api
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Also tag as latest
        echo "Tagging as latest and pushing..."
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Successfully built and pushed image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Download existing task definition
      id: download-task-definition
      run: |
        # Get the latest task definition for the family
        aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_FAMILY --query 'taskDefinition' > task-definition.json
        echo "Downloaded task definition for family: $ECS_TASK_DEFINITION_FAMILY"
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: render-task-definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: caf-backend
        image: ${{ steps.build-image.outputs.image }}
        
    - name: Deploy Amazon ECS task definition
      id: deploy-task-definition
      run: |
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://${{ steps.render-task-definition.outputs.task-definition }} --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "Registered new task definition: $NEW_TASK_DEF_ARN"
        echo "task_definition_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT
        
        # Clean up temporary files
        rm task-definition.json

    - name: Deploy to Amazon ECS service
      run: |
        echo "Updating ECS service $ECS_SERVICE with new task definition ${{ steps.deploy-task-definition.outputs.task_definition_arn }}"
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE \
          --task-definition ${{ steps.deploy-task-definition.outputs.task_definition_arn }} \
          --force-new-deployment
        echo "ECS service update initiated."

    - name: Wait for deployment to complete
      run: |
        echo "Monitoring deployment progress for service $ECS_SERVICE..."
        
        # Wait for deployment with longer timeout and better error handling
        timeout 900 aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE || {
          echo "Deployment still in progress or timed out (900s), checking health manually..."
          
          # Check if service is actually healthy even if not marked stable
          RUNNING_COUNT=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].runningCount' --output text)
          DESIRED_COUNT=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].desiredCount' --output text)
          PENDING_COUNT=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].pendingCount' --output text)
          
          echo "Current status: $RUNNING_COUNT running, $PENDING_COUNT pending, $DESIRED_COUNT desired"
          
          if [ "$RUNNING_COUNT" = "$DESIRED_COUNT" ] && [ "$RUNNING_COUNT" -gt 0 ]; then
            echo "✅ Service is running with desired task count: $RUNNING_COUNT/$DESIRED_COUNT"
          else
            echo "❌ Service not yet stable: $RUNNING_COUNT/$DESIRED_COUNT tasks running. Desired: $DESIRED_COUNT"
            
            # Show recent service events for debugging
            echo "Recent service events:"
            aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].events[0:5].[createdAt,message]' --output table
            
            exit 1
          fi
        }
        echo "Deployment completed successfully!"

    - name: Verify deployment
      run: |
        echo "Waiting 30 seconds for health checks to propagate..."
        sleep 30 # Wait a bit for health checks
        
        echo "Testing API health endpoint..."
        curl -f http://api.caf-mexico.org/health || { echo "Health check failed for /health"; exit 1; }
        echo "Health check /health passed."
        
        echo "Testing API ready endpoint..."
        curl -f http://api.caf-mexico.org/health/ready || { echo "Ready check failed for /health/ready"; exit 1; }
        echo "Health check /health/ready passed."
        echo "API endpoints verified successfully!"

    - name: Deployment Summary
      run: |
        echo "--- Deployment Summary ---"
        echo "Commit SHA: ${{ github.sha }}"
        echo "Image: ${{ steps.build-image.outputs.image }}"
        echo "Task Definition ARN: ${{ steps.deploy-task-definition.outputs.task_definition_arn }}"
        echo "ECS Service: ${{ env.ECS_SERVICE }}"
        echo "ECS Cluster: ${{ env.ECS_CLUSTER }}"
        echo "Status: Deployment completed successfully."